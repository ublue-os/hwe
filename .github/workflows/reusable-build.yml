name: build-ublue
on:
  workflow_call:
    inputs:
      fedora_version:
        description: 'The Fedora release version: 38, 39, 40, etc'
        required: true
        type: string
env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.fedora_version }}
  cancel-in-progress: true

jobs:
  build_ublue:
    name: hwe
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        fedora_version:
          - ${{ inputs.fedora_version }}
        hwe_flavor:
          - main
          - asus
          - surface
        image_name:
          - silverblue
          - kinoite
          - sericea
          - onyx
          - base
          - lxqt
          - lazurite
          - mate
          - vauxite
        nvidia_version:
          - 0   # No Nvidia drivers (this indicates to only build "main" image target
          - 470 # Older Nvidia driver
          - 550 # Latest Nvidia driver (update IS_LATEST_DRIVER below if version changes)
        exclude:
          # There is no Fedora 38 version of onyx or lazurite
          - image_name: onyx
            fedora_version: 38
          - image_name: lazurite
            fedora_version: 38
          # There is no Fedora 39+ version of lxqt as it was replaced by lazurite
          - image_name: lxqt
            fedora_version: 39
          - image_name: lxqt
            fedora_version: 40
          # There is currently no Fedora 40 version of mate
          - image_name: mate
            fedora_version: 40
          # Don't build/push "main" since it would be a duplicate of the "base" `*-main` images
          - nvidia_version: 0
            hwe_flavor: main
          # Only build latest Fedora versions for "asus" and "surface" HWE flavors
          - fedora_version: 38
            hwe_flavor: asus
          - fedora_version: 38
            hwe_flavor: surface
          # Only build latest nvidia version for "surface" HWE flavor
          - nvidia_version: 470
            hwe_flavor: surface
    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Verify base image
        uses: EyeCantCU/cosign-action/verify@v0.2.2
        with:
          containers: ${{ matrix.image_name }}-main:${{ matrix.fedora_version }}

      - name: Matrix Variables
        run: |
          if [[ "${{ matrix.hwe_flavor }}" == "main" ]]; then
            if "${{ matrix.nvidia_version }}" == "0" ]]; then
              echo "this workflow does not build main image without Nvidia drivers"
              exit 1
            fi
            echo "IMAGE_NAME=${{ matrix.image_name }}-nvidia" >> $GITHUB_ENV
          else
            echo "IMAGE_NAME=${{ matrix.image_name }}-${{ matrix.hwe_flavor }}${{ matrix.nvidia_version != '0' && '-nvidia' || ''}}" >> $GITHUB_ENV
          fi
          echo "SOURCE_IMAGE=${{ matrix.image_name }}-main" >> $GITHUB_ENV

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          VARIANT="${{ matrix.fedora_version }}${{ matrix.nvidia_version == '0' && '' || format('-{0}', matrix.driver_version) }}"

          if [[ "${{ matrix.fedora_version }}" -eq "38" ]]; then
            IS_LATEST_VERSION=false
            IS_STABLE_VERSION=true
            IS_GTS_VERSION=true
          elif [[ "${{ matrix.fedora_version }}" -eq "39" ]]; then
            IS_LATEST_VERSION=true
            IS_STABLE_VERSION=true
            IS_GTS_VERSION=false
          elif [[ "${{ matrix.fedora_version }}" -eq "40" ]]; then
            IS_LATEST_VERSION=false
            IS_STABLE_VERSION=false
            IS_GTS_VERSION=false
          fi

          if [[ "${{ matrix.nvidia_version }}" -eq "550" ]]; then
            IS_LATEST_DRIVER=true
          fi

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}")
          COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}")

          if [[ "${IS_LATEST_VERSION}" == "true" ]] && \
             [[ "${IS_STABLE_VERSION}" == "true" ]] && \
             [[ "${IS_LATEST_DRIVER}" == "true" ]]; then
              COMMIT_TAGS+=("pr-${{ github.event.number }}")
              COMMIT_TAGS+=("${SHA_SHORT}")
          fi

          BUILD_TAGS=("${VARIANT}")

          if [[ "${IS_LATEST_DRIVER}" == "true" ]]; then
              BUILD_TAGS+=("${{ matrix.fedora_version }}-current")
              BUILD_TAGS+=("${{ matrix.fedora_version }}")
          fi

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          if [[ "${IS_LATEST_VERSION}" == "true" ]] && \
             [[ "${IS_STABLE_VERSION}" == "true" ]] && \
             [[ "${IS_LATEST_DRIVER}" == "true" ]]; then
              BUILD_TAGS+=("${TIMESTAMP}")
              BUILD_TAGS+=("latest")
          fi

          if [[ "${IS_GTS_VERSION}" == "true" ]] && \
             [[ "${IS_LATEST_DRIVER}" == "true" ]]; then
              BUILD_TAGS+=("gts-${TIMESTAMP}")
              BUILD_TAGS+=("gts")
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Get current version
        id: labels
        uses: Wandalen/wretry.action@v2.1.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eo pipefail
            ver=$(skopeo inspect docker://ghcr.io/ublue-os/${{ env.SOURCE_IMAGE }}:${{ matrix.fedora_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
            if [ -z "$ver" ] || [ "null" = "$ver" ]; then
              echo "inspected image version must not be empty or null"
              exit 1
            fi
            echo "SOURCE_IMAGE_VERSION=$ver" >> $GITHUB_ENV

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=ublue-os ${{ matrix.image_name }}${{ matrix.hwe_flavor == 'asus' && ' for ASUS devices' || '' }}${{ matrix.hwe_flavor == 'surface' && ' for Surface laptops' || ''}}${{ matrix.nvidia_version != '0' && ' with Nvidia drivers' || ''}}
            org.opencontainers.image.version=${{ env.SOURCE_IMAGE_VERSION }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/1728152?s=200&v=4

      - name: Pull base image
        uses: Wandalen/wretry.action@v2.1.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            # pull the base image used for FROM in containerfile so
            # we can retry on that unfortunately common failure case
            podman pull ghcr.io/ublue-os/${{ matrix.image_name }}-main:${{ matrix.fedora_version }}

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            IMAGE_NAME=${{ matrix.image_name }}
            SOURCE_IMAGE=${{ env.SOURCE_IMAGE }}
            FEDORA_MAJOR_VERSION=${{ matrix.fedora_version }}
            NVIDIA_MAJOR_VERSION=${{ matrix.nvidia_version }}
            HWE_FLAVOR=${{ matrix.hwe_flavor }}
            RPMFUSION_MIRROR=${{ vars.RPMFUSION_MIRROR }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false
          extra-args: |
            --target=${{ matrix.nvidia_version == '0' && 'main' || 'nvidia' }}

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: Wandalen/wretry.action@v2.1.0
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ steps.build_image.outputs.image }}
            tags: ${{ steps.build_image.outputs.tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}
            extra-args: |
              --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - uses: sigstore/cosign-installer@v3.4.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  check:
    name: Check all ${{ inputs.fedora_version }} builds successful
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [build_ublue]
    steps:
      - name: Exit on failure
        if: ${{ needs.build_ublue.result == 'failure' }}
        shell: bash
        run: exit 1
      - name: Exit
        shell: bash
        run: exit 0
