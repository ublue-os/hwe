name: build-ublue
on:
  pull_request:
    branches:
      - main
      - devel
  schedule:
    - cron: '20 20 * * *'  # 8:20pm everyday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:
  
env:
    IMAGE_NAME: ${{ format('{0}-nvidia', matrix.image_name) }}
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_name: [silverblue, kinoite, vauxite, sericea, base]
        major_version: [37]
        driver_version: [520, 525]
        include:
        # - major_version: 36
        #   is_latest_version: false
        #   is_stable_version: true
          - major_version: 37
            is_latest_version: true
            is_stable_version: true
        # - major_version: 38
        #   is_latest_version: true
        #   is_stable_version: false
          - driver_version: 525
            is_latest_driver: true
        exclude:
          # There is no Fedora 37 version of sericea
          # When F38 is added, sericea will automatically be built too
          - image_name: sericea
            major_version: 37
    steps: 
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v3

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

          container_tags=()
          # The following is run when the timer is triggered or a merge/push to main
          TIMESTAMP="$(date +%Y%m%d)"

          container_tags+=("${{ matrix.major_version }}-${{ matrix.driver_version }}")

          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              BRANCH="stable"
          elif [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
               [[ "${{ matrix.is_stable_version }}" != "true" ]]; then
              BRANCH="unstable"
          else
              BRANCH="oldstable"
          fi

          if [[ "${{ matrix.is_latest_driver }}" == "true" ]]; then
              container_tags+=("${{ matrix.major_version }}-current")
              container_tags+=("${BRANCH}")
              container_tags+=("${{ matrix.major_version }}")
          fi

          # Append matching timestamp tags to keep a version history
          for TAG in "${container_tags[@]}"; do
              container_tags+=("${TAG}-${TIMESTAMP}")
          done

          if [[ "${BRANCH}" == "stable" ]] && \
             [[ "${{ matrix.is_latest_driver }}" == "true" ]]; then
              container_tags+=("${TIMESTAMP}")
              container_tags+=("latest")
          fi

          echo "Generated the following tags: "
          for TAG in "${container_tags[@]}"; do
              echo "${TAG}"
          done

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              alias_tags=("pr-${{ github.event.number }}")
          else
              alias_tags=("${container_tags[@]}")
          fi


          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Retrieve akmods signing key
        run: |
          mkdir -p certs
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              openssl req -new \
                  -nodes \
                  -utf8 \
                  -sha256 \
                  -days 365 \
                  -batch \
                  -x509 \
                  -outform DER \
                  -out certs/public_key.der \
                  -keyout certs/private_key.priv
          else
              echo "${{ secrets.AKMOD_PRIVKEY }}" > certs/private_key.priv
          fi
          # DEBUG: get character count of key
          wc -c certs/private_key.priv
      
      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/ublue-os/base/main/README.md
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/1728152?s=200&v=4
      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          # Postfix image name with -nvidia to make it a little more descriptive
          # Syntax: https://docs.github.com/en/actions/learn-github-actions/expressions#format
          image: ${{ format('{0}-nvidia', matrix.image_name) }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
            ${{ steps.generate-tags.outputs.sha_short }}
          build-args: |
            IMAGE_NAME=${{ matrix.image_name }}
            FEDORA_MAJOR_VERSION=${{ matrix.major_version }}
            NVIDIA_MAJOR_VERSION=${{ matrix.driver_version }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

      # Sign container
      - uses: sigstore/cosign-installer@main

      # Only needed when running `cosign sign` using a key
      - name: Write signing key to disk
        run: |
          echo "${{ env.COSIGN_PRIVATE_KEY }}" > cosign.key
          # DEBUG: get character count of key
          wc -c cosign.key
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign container image
        run: |
          cosign sign --key cosign.key ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
